name: Smart AQI Model Training

on:
  schedule:
    # Check daily but only retrain when needed
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      model_horizon:
        description: 'Model horizon to train (24h, 48h, 72h, or all)'
        required: false
        default: '24h'
        type: choice
        options:
          - '24h'
          - '48h'
          - '72h'
          - 'all'
      force_retrain:
        description: 'Force retraining regardless of data freshness'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  check-data-freshness:
    runs-on: ubuntu-latest
    outputs:
      should_train: ${{ steps.data_check.outputs.should_train }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas hopsworks python-dateutil

      - name: Check data freshness
        id: data_check
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python ci_cd/check_data_freshness.py

  train-models:
    needs: check-data-freshness
    if: needs.check-data-freshness.outputs.should_train == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        horizon: ['24h', '48h', '72h']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_training_requirements.txt

      - name: Train AQI Model
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
          OWM_API_KEY: ${{ secrets.OWM_API_KEY }}
          FORCE_RETRAIN: ${{ inputs.force_retrain }}
          MODEL_HORIZON: ${{ matrix.horizon }}
        run: |
          python ci_cd/train_model_pipeline.py --horizon ${{ matrix.horizon }}

      - name: Upload model artifacts
        uses: actions/upload-artifact@v3
        with:
          name: aqi-model-${{ matrix.horizon }}
          path: |
            model_results/
          retention-days: 30

  evaluate-models:
    needs: train-models
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all model artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_training_requirements.txt

      - name: Evaluate and compare models
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python ci_cd/evaluate_models.py

      - name: Generate model report
        run: |
          python ci_cd/generate_model_report.py

      - name: Upload evaluation report
        uses: actions/upload-artifact@v3
        with:
          name: model-evaluation-report
          path: reports/
          retention-days: 90

  deploy-best-models:
    needs: [train-models, evaluate-models]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download model artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_training_requirements.txt

      - name: Deploy models to Hopsworks Model Registry
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python ci_cd/deploy_models.py

      - name: Send notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "AQI Model Training Pipeline completed with status: ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    needs: [train-models, evaluate-models, deploy-best-models]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Cleaning up old model artifacts and logs"
          # Add cleanup logic here
