name: Smart AQI Model Training

on:
  schedule:
    # Check daily but only retrain when needed
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      model_horizon:
        description: 'Model horizon to train (24h, 48h, 72h, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - '24h'
          - '48h'
          - '72h'
          - 'all'
      force_retrain:
        description: 'Force retraining regardless of data freshness'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  daily-training:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_training_requirements.txt

      - name: Data freshness check
        id: freshness
        if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force_retrain == false) }}
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        continue-on-error: true
        run: |
          echo "Running freshness gate..."
          python ci_cd/check_data_freshness.py
          STATUS=$?
          if [ $STATUS -eq 0 ]; then
            echo "should_train=true" >> $GITHUB_OUTPUT
          else
            echo "should_train=false" >> $GITHUB_OUTPUT
          fi
          echo "Script exit status: $STATUS"

      - name: Decide
        id: decision
        run: |
          FORCE="false"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            FORCE="${{ inputs.force_retrain }}"
          fi
          if [ "$FORCE" = "true" ]; then
            echo "Force retrain requested: proceeding."; echo "proceed=true" >> $GITHUB_OUTPUT; exit 0;
          fi
          SHOULD="${{ steps.freshness.outputs.should_train }}"
          if [ -z "$SHOULD" ]; then SHOULD="false"; fi
          if [ "$SHOULD" = "true" ]; then
            echo "Freshness gate passed: proceeding."; echo "proceed=true" >> $GITHUB_OUTPUT; exit 0;
          else
            echo "No new data and not forced: skipping training."; echo "proceed=false" >> $GITHUB_OUTPUT; exit 0;
          fi

      - name: Train models
        if: ${{ steps.decision.outputs.proceed == 'true' }}
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
          OWM_API_KEY: ${{ secrets.OWM_API_KEY }}
          FORCE_RETRAIN: ${{ github.event_name == 'workflow_dispatch' && inputs.force_retrain }}
        run: |
          HORIZON="all"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            HORIZON="${{ inputs.model_horizon }}"
          fi
          if [ "$HORIZON" = "all" ]; then
            for h in 24h 48h 72h; do
              echo "Training $h"; python ci_cd/train_model_pipeline.py --horizon $h; done
          else
            python ci_cd/train_model_pipeline.py --horizon $HORIZON
          fi

      - name: Evaluate models
        if: ${{ steps.decision.outputs.proceed == 'true' }}
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python ci_cd/evaluate_models.py

      - name: Generate report
        if: ${{ steps.decision.outputs.proceed == 'true' }}
        run: |
          python ci_cd/generate_model_report.py

      - name: Deploy models to Hopsworks Model Registry
        if: ${{ steps.decision.outputs.proceed == 'true' }}
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python ci_cd/deploy_models.py

      - name: Upload artifacts (models + reports)
        if: ${{ steps.decision.outputs.proceed == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: daily-training-artifacts
          path: |
            model_results/
            reports/
          retention-days: 30

      - name: Skip notice
        if: ${{ steps.decision.outputs.proceed != 'true' }}
        run: |
          echo "Training skipped: freshness gate failed and no force retrain."
